spring:
#  kafka:
#    consumer:
#      group-id: tpd-loggers
#      auto-offset-reset: earliest
#    # change this property if you are using your own
#    # Kafka cluster or your Docker IP is different
#    bootstrap-servers: localhost:9092

  cloud:
    openfeign:
      circuitbreaker:
        enabled: true
      httpclient:
        hc5:
          enabled: true

resilience4j:
  circuitbreaker:
    configs:
      default: #10번 요청에서 실패율이 50%가 넘으면 서킷브레이커가 Open하고 Open 30초 후에 다시 Half-Open 상태로 전환
        slidingWindowType: COUNT_BASED
        slidingWindowSize: 3 #서킷브레이커가 닫힌 상태에서 기록할 sliding window 크기 설정
        failure-rate-threshold: 50 #실패 비율 임계치를 백분율로 설정
        minimumNumberOfCalls: 3
        permittedNumberOfCallsInHalfOpenState: 3
        waitDurationInOpenState: 30s #서킷브레이커가 Open후 waitDurationInOpenState 시간만큼 지난 후 Half-Open 상태도 전환
        slowCallDurationThreshold: 5s
        registerHealthIndicator: true
#        recordFailurePredicate: client.DefaultExceptionRecordFailurePredicate
          #recordFailurePredicate는 어떤 예외를 Fail로 기록할 것인지를 결정하기 위한 Predicate 설정이다.
    instances:
      test:
        slidingWindowType: COUNT_BASED
        slidingWindowSize: 1
  timelimiter:
    configs:
      default:
        timeoutDuration: 5s
        cancelRunningFuture: true


management:
  endpoints:
    web:
      exposure:
        include: prometheus  # 대시보드 scrape endpoint
      base-path: /actuator
  metrics:
    tags:
      application: mangkyu-server  # 대시보드에 노출될 application 명

#Kafka PROPERTIES
kafka:
  bootstrap-servers: localhost:9092
#  ssl:
#    protocol: SSL
#    trust-store-location: classpath:/app/store/truststore.jks
#    trust-store-password: password
#    key-store-location: classpath:/app/store/keystore.jks
#    key-store-password: password
#    key-password: password
  producer:
    producer1:
#      bootstrap-servers: localhost:9092
      topic: advice-topic1
      retries: 0
      acks: all
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring:
          json:
            trusted:
              packages: "*"
          deserializer:
            value:
              delegate:
                class: org.springframework.kafka.support.serializer.JsonDeserializer
    producer2:
#      bootstrap-servers: localhost:9092
      topic: advice-topic2
      retries: 2
      acks: 1
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
  consumer:
    json:
      topic: advice-topic1
      group-id: tpd-loggers1
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring:
          json:
            trusted:
              packages: "*"
          deserializer:
            value:
              delegate:
                class: org.springframework.kafka.support.serializer.JsonDeserializer
    string:
      topic: advice-topic1
      group-id: tpd-loggers2
      auto-offset-reset: latest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    byteArray:
      topic: advice-topic1
      group-id: tpd-loggers3
      auto-offset-reset: latest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.ByteArrayDeserializer

#pybc:
#  urlMap:
#    pay: https://randomuser.me
#    memb: https://randomuser.me

prop:
  test:
    test1:
      name: test1
      value: value1
    test2:
      name: test2
      value: value2

multiple-datasource:
  test: test
  datasource-config:
    - name: one
      datasource:
        jdbcUrl: jdbc:h2:~/test
        username: sa
        password:
        driverClassName: org.h2.Driver
        maximumPoolSize: 20
      mybatis:
        config-location:
        mapper-locations: classpath*:/mapper/**/*.xml
        base-package: config
        annotation-class: org.apache.ibatis.annotations.Mapper
    - name: two
      datasource:
        jdbcUrl: jdbc:h2:~/test
        username: sa
        password:
        driverClassName: org.h2.Driver
        maximumPoolSize: 20
      mybatis:
        config-location:
        mapper-locations: classpath*:/mapper/**/*.xml
        base-package: config
        annotation-class: config.data.TwoMapper
